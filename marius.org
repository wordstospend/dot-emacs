#+TITLE:     marius.org
#+AUTHOR:    Marius Mathiesen
#+EMAIL:     zmalltalker@zmalltalker.com
#+DATE:      2012-07-06 Fri
#+DESCRIPTION: My emacs configuration
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:


* Dot emacs, literate style

  This file is loaded from init.el after any .org files in extras/
  This is because we want to be able to use libraries from there from
  this file.

** The basics

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

** Packages

   Emacs 24 ships with a package system, which is great.
   Let's enable it:

#+begin_src emacs-lisp
(package-initialize)
#+end_src

   and add some more repositories:

#+begin_src emacs-lisp
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))
#+end_src

** testing on ruby mode
#+BEGIN_SRC emacs-lisp
(require 'ruby-mode)
#+END_SRC
** javascript via js2-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'js-mode-hook 'js2-minor-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)
(setq js2-highlight-level 3)

;; After js2 has parsed a js file, we look for jslint globals decl comment ("/* global Fred, _, Harry */") and
;; add any symbols to a buffer-local var of acceptable global vars
;; Note that we also support the "symbol: true" way of specifying names via a hack (remove any ":true"
;; to make it look like a plain decl, and any ':false' are left behind so they'll effectively be ignored as
 ;; you can;t have a symbol called "someName:false"
(add-hook 'js2-post-parse-callbacks
          (lambda ()
            (when (> (buffer-size) 0)
              (let ((btext (replace-regexp-in-string
                            ": *true" " "
                            (replace-regexp-in-string "[\n\t ]+" " " (buffer-substring-no-properties 1 (buffer-size)) t t))))
                (mapc (apply-partially 'add-to-list 'js2-additional-externs)
                      (split-string
                       (if (string-match "/\\* *global *\\(.*?\\) *\\*/" btext) (match-string-no-properties 1 btext) "")
                       " *, *" t))
                ))))
#+END_SRC
** Yasnippet
   I keep revisiting this one. [[http://blog.binchen.org/?p%3D553][Bin Chen]] suggests binding completion
   to a different key combo than =TAB=, which may make sense. Oh, and
   he uses it for email, which is pretty awesome.

   Giving it another shot, this time binding it to =C-c k=
#+BEGIN_SRC emacs-lisp
;;  (add-to-list 'load-path "~/.emacs.d/elpa/yasnippet-0.8.0")
  (require 'yasnippet)
  (yas/global-mode t)
  (setq my-snippets (expand-file-name "~/.emacs.d/snippets"))
  (add-to-list 'yas-snippet-dirs my-snippets)
#+END_SRC

   Now to stop yasnippets from occupying =TAB= (God, that's annoying)
   and rebind to =C-c y e= (mnemonic Yas Expand).

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c y e") 'yas-expand)
(global-set-key (kbd "C-c y i") 'yas-insert-snippet)
(define-key yas-minor-mode-map [(tab)] nil)
#+END_SRC

** Switching windows
This allows us to switch windows by number
#+BEGIN_SRC emacs-lisp
(require 'switch-window)
(global-set-key (kbd "C-x o") 'switch-window)
#+END_SRC
** SubWord
Make a workd boundery at camal cas
#+BEGIN_SRC emacs-lisp
(global-subword-mode t)
#+END_SRC
** Auto-fill in org-mode
   I always want auto-fill-mode on in my org buffers.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
(lambda() (auto-fill-mode)))
#+END_SRC
** Ido
    Ido improves all kind of minibuffer activities:
    - find-file
    - switch-buffer

    with case-insensitivity and all kinds of wonderful things. Let's
    load it up:

#+begin_src emacs-lisp
(load-library "ido")
(ido-mode)
#+end_src

*** Jump to symbol support
    Jump to a symbol (function, class etc.) with completion.
    No textmate required

#+begin_src emacs-lisp
(defun ido-goto-symbol (&optional symbol-list)
      "Refresh imenu and jump to a place in the buffer using Ido."
      (interactive)
      (unless (featurep 'imenu)
        (require 'imenu nil t))
      (cond
       ((not symbol-list)
        (let ((ido-mode ido-mode)
              (ido-enable-flex-matching
               (if (boundp 'ido-enable-flex-matching)
                   ido-enable-flex-matching t))
              name-and-pos symbol-names position)
          (unless ido-mode
            (ido-mode 1)
            (setq ido-enable-flex-matching t))
          (while (progn
                   (imenu--cleanup)
                   (setq imenu--index-alist nil)
                   (ido-goto-symbol (imenu--make-index-alist))
                   (setq selected-symbol
                         (ido-completing-read "Symbol? " symbol-names))
                   (string= (car imenu--rescan-item) selected-symbol)))
          (unless (and (boundp 'mark-active) mark-active)
            (push-mark nil t nil))
          (setq position (cdr (assoc selected-symbol name-and-pos)))
          (cond
           ((overlayp position)
            (goto-char (overlay-start position)))
           (t
            (goto-char position)))))
       ((listp symbol-list)
        (dolist (symbol symbol-list)
          (let (name position)
            (cond
             ((and (listp symbol) (imenu--subalist-p symbol))
              (ido-goto-symbol symbol))
             ((listp symbol)
              (setq name (car symbol))
              (setq position (cdr symbol)))
             ((stringp symbol)
              (setq name symbol)
              (setq position
                    (get-text-property 1 'org-imenu-marker symbol))))
            (unless (or (null position) (null name)
                        (string= (car imenu--rescan-item) name))
              (add-to-list 'symbol-names name)
              (add-to-list 'name-and-pos (cons name position))))))))
#+end_src

** Emacs server mode
   Let's support emacsclient. For that to work, we'll need to start the server.
   Unless, of course, it's already running

#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p) (server-start))
#+end_src

** Zen coding
   Absolutely amazing. By entering CSS selectors like
   =html>head+body>div.content>ul#navigation>li.item*4= and caling
   =zencoding-expand-line= you end up with:
   - an interactive preview of the markup that would be rendered
   - Pressing =RET= will insert it into the buffer.

   I made a short [[http://ascii.io/a/3330][asciicast]] about it. Let's activate it automatically
   for any SGML modes

#+BEGIN_SRC emacs-lisp
(add-hook 'sgml-mode-hook 'zencoding-mode)
(add-hook 'web-mode-hook 'zencoding-mode)
#+END_SRC

** Blogging from org
   Apparently, we need to set up the project list

#+begin_src emacs-lisp
  (setq org-publish-project-alist
        '(("blogg"
           :base-directory "/home/marius/Projects/blog/orgfiles"
           :publishing-directory "/home/marius/Projects/blog/output"
           :publishing-function org-html-publish-to-html
           :headline-levels 3
           :recursive t
           :exclude "^\..$"
           :table-of-contents nil
           :html-preamble nil
           :html-postamble nil
           :body-only t
           :section-numbers nil
           :auto-sitemap t
           :sitemap-filename "index.org"
           :sitemap-sort-files anti-chronologically
           :sitemap-sort-folders last
           :sitemap-file-entry-format "%d: *%t*"
           :sitemap-date-format "%B %e, %Y"
           )
          ("images"
           :base-directory "~/Projects/blog/images"
           :base-extension "jpg\\|gif\\|png"
           :publishing-directory "/ssh:friskbris.no:/var/www/zmalltalker.com/images/"
           :publishing-function org-publish-attachment)
          ("bolig"
           :base-directory "/home/marius/Dropbox/dotfiles/orgfiles/bolig/"
           :publishing-directory "/home/marius/Dropbox/Public/Laarhalsen"
           :headline-levels 3
           :recursive t
           :table-of-contents nil
           :html-preamble nil
           :html-postamble nil
           :body-only t
           :section-numbers nil
           :auto-sitemap t
           )
          ("gitorious-book"
           :base-directory "/home/marius/Projects/gitorious/gitorious-book/"
           :publishing-directory "/tmp/gitorious-book"
           :headline-levels 3
           :recursive t
           :table-of-contents t
           :html-preamble nil
           :html-postamble nil
           :body-only nil
           :section-numbers nil
           :auto-sitemap t
           )
          ))

#+end_src

   Let's bind =C-x p= to =org-publish-current-project=
#+begin_src emacs-lisp
    (global-set-key (kbd "C-x p") 'org-publish-current-project)
#+end_src

   Org-mode produces some quite nasty HTML, and I use Twitter
   Bootstrap to mark up my code, so I want to use different tags from
   the defaults.

   Because of this I export the body part only, and run a Rake task
   which uses ERB to generate a full HTML page afterwards. I'm adding
   a hook that's run after publishing; this will generate any updated
   HTML files and publish it to my website.

#+begin_src emacs-lisp
  (add-hook 'org-publish-after-export-hook (lambda ()
                                             (shell-command "cd ~/Projects/blog && rake deploy")))

#+end_src

   And then we definitely want to use htmlize, as this will do
   wonderful things to source code in org files. It's distributed with
   orgmode, but we'll need to load it.

#+begin_src emacs-lisp
(add-to-list 'load-path (concat dotfiles-dir "/src/org-mode/contrib/lisp"))
(require 'htmlize)
#+end_src

   In order to fontify RPM specs, I'll need this baby
#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/")
(autoload 'rpm-spec-mode "rpm-spec-mode.el" "RPM spec mode." t)
;;(require 'rpm-spec-mode)
#+end_src

   Does fontified Smalltalk sound good? Let's do it!

#+begin_src emacs-lisp
(require 'smalltalk-mode)
#+end_src
** YAML mode

   YAML is ... should we say *picky*? ... to edit by hand. Indentation
   matters a lot, and syntax highlighting is a great help.

   Let's get some help:

#+begin_src emacs-lisp
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
#+end_src

** Update PATH
   I need (among others?) node on my PATH within Emacs
#+BEGIN_SRC emacs-lisp
(setenv "PATH"
  (concat
   "/opt/node/bin:"
   (getenv "PATH")
  )
)

#+END_SRC
** Magnar's awesome Magit setup
   Magit. I was skeptical at first, but then I just ... yum.
   Let's load it

#+begin_src emacs-lisp
(require 'magit)
(add-to-list 'load-path "/home/marius/.emacs.d/extras")
#+end_src

   Magnar (or Christian?) shared some customizations for Magit
   that make it even better:

#+begin_src emacs-lisp
(require 'setup-magit)
#+end_src

   I use C-x m for starting magit

#+begin_src emacs-lisp
(global-set-key (kbd "C-x m") 'magit-status)
#+end_src

** Add a little formatting to done headlines in org-mode
   Picked up this little nugget from [[http://sachachua.com/blog/2012/12/emacs-strike-through-headlines-for-done-tasks-in-org/][this blog post.]]
#+BEGIN_SRC emacs-lisp
  (setq org-fontify-done-headline t)
  (custom-set-faces
   '(org-done ((t (:foreground "PaleGreen"
                   :weight normal
                   :strike-through t))))
   '(org-headline-done
              ((((class color) (min-colors 16) (background dark))
                 (:foreground "LightSalmon" :strike-through t)))))
#+END_SRC
** Recent files
   Support open-recent-file. This needs some work.

#+begin_src emacs-lisp
(require 'recentf)
(recentf-mode 1)
#+end_src

   I just copied something awesome off the Internet! It's a function
   that does an ido-complete of the recently open files.

#+BEGIN_SRC emacs-lisp
  (defun recentf-interactive-complete ()
    "find a file in the recently open file using ido for completion"
    (interactive)
    (let* ((all-files recentf-list)
           (file-assoc-list (mapcar (lambda (x) (cons (file-name-nondirectory x) x)) all-files))
           (filename-list (remove-duplicates (mapcar 'car file-assoc-list) :test 'string=))
           (ido-make-buffer-list-hook
            (lambda ()
              (setq ido-temp-list filename-list)))
           (filename (ido-read-buffer "Find Recent File: "))
           (result-list (delq nil (mapcar (lambda (x) (if (string= (car x) filename) (cdr x))) file-assoc-list)))
           (result-length (length result-list)))
      (find-file
       (cond
        ((= result-length 0) filename)
        ((= result-length 1) (car result-list))
        ( t
          (let ( (ido-make-buffer-list-hook
                  (lambda ()
                    (setq ido-temp-list result-list))))
            (ido-read-buffer (format "%d matches:" result-length))))
        ))))
#+END_SRC

   Now let's map this baby to C-x C-g:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-g") 'recentf-interactive-complete)
#+END_SRC
** Theme
   Emacs 24 has built-in theming support.
*** Custom themes
    Dropping any themes I want to try out into =~/.emacs.d/themes=

#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
#+END_SRC

*** Current theme

   I'm using the solarized-dark theme right now. It's really easy on
   my eyes and pretty as well. This theme is installed using Emacs'
   package manager, so solarized would be in elpa/solarized-theme-0.5.0.
   To install a theme, use package-install.

#+begin_src emacs-lisp
  (setq zmalltalker/default-theme 'zenburn)
  (setq zmalltalker/lighter-theme 'solarized-light)
  (defun zmalltalker/theme-lighter ()
    (interactive)
    (load-theme zmalltalker/lighter-theme t)
  )
  (defun zmalltalker/default-theme ()
    (interactive)
    (load-theme zmalltalker/default-theme t)
  )

  (zmalltalker/default-theme)
#+end_src

   Sometimes I need to use a lighter theme, eg. when using
   htmlize. I'm adding a function for switching to this and back.
** Run tests from Emacs
   This is currently a wish list
  - [X] find .rvmrc
  - [X] set correct ruby
  - [X] run $ruby -Ilib:test <project_root>/path
  - [ ] compile
** Mark text and delete/replace immediately
   You know how other editors will let you select text and then start
   typing right away to replace it? You know how you need to remove
   this from your muscle memory when using Emacs? No more

#+begin_src emacs-lisp
(delete-selection-mode)
#+end_src
** Ascii art to Unicode
   Convert simple ASCII art drawings (and org-tables) to beautiful
   Unicode.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (concat dotfiles-dir "/contrib"))
(require 'ascii-art-to-unicode)
#+END_SRC
** TODO More org exporters (Org > 7.9)
   This is WIP, as org 8.0 changes exports stuff [[http://orgmode.org/worg/org-8.0.html][a lot]]

   Markdown is an inferior format, and can be generated.
   Halleluja, I can make man pages!
#+BEGIN_SRC emacs-lisp
(setq org-export-backends '(ascii html icalendar latex man deck groff rss texinfo))
#+END_SRC
** Use bullets for headings in org

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elpa/org-bullets")
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** Org mode
set up todo states
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
  '((sequence "TODO" "IN-PROGRESS" "WAITING" "|" "DONE" "CANCELLED")))
#+END_SRC
setting tag list
#+BEGIN_SRC emacs-lisp
(setq org-tag-alist '(;; location tags
                      (:startgroup . nil)
                      ("@work" . ?w) ("@home" . ?h)
                      (:endgroup . nil)
                      (:startgroup . nil)
                      ("@computer" . ?c)
                      ("@onthego" . ?o)
                      (:endgroup . nil)
                      ("@tel" . ?t)
                      ;; owner client
                      ("4say" . ?s) ("4personal" . ?p)))
#+END_SRC
Refiling C-c C-w
      ("~/org/gtd.org" :maxlevel . 4)
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 2)
                           (org-agenda-files :maxlevel . 4)
                           ))
#+END_SRC
*** Mobile Org
in order for mobile org to work a few things need to be added
#+BEGIN_SRC emacs-lisp
(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
(find-file "~/org/gtd.org")
#+END_SRC
*** Org-agenda setup
   Which org-files are included in the agenda?
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/org/gtd.org"))
#+END_SRC

   Let's bind =C-c a= to =org-agenda=
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

   Key bindings when using =org-schedule= (the little calendar thingie):
   - =M-+= / =M--=: next/previous day
   - =+[0-9]=: _n_ days from today
   - =M-n= / =M-p=: next/previous week

** Speed commands in org
   With speed commands enabled, I can enter single-letter commands
   when the cursor is at the very beginning of a headline. =?=
   displays a menu

#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
#+END_SRC
** Trailing whitespace
   Removing trailing whitespace on save should be on by default. I've
   been looking like a clueless moron

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Code cleanup
   In order to have really neat source code, it sounds like a good
   idea to have a single keystroke for cleaning up a file.

   #+BEGIN_SRC emacs-lisp
     (defun zmalltalker-clean-up-everything ()
       "Perform housekeeping on the current buffer"
       (interactive)
       (save-excursion
         (whitespace-cleanup)
         (mark-whole-buffer)
         (indent-region (point) (mark))
         )
       )
   #+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c n") 'zmalltalker-clean-up-everything)
#+END_SRC
** Rinari
   No fucking way. I'm leaving this trail behind just to remind me not
   to do this again.
** Email setup
   I'm playing with Mutt as my MUA (with offlineimap for sync and
   msmtp for sending mail). It's awesome.

   I put "set editor=emacsclient -c" in my ~/.muttrc, which makes
   emacsclient open a new graphical frame when I compose/reply
   to/forward a message.

   Set up mail mode when viewing a mutt buffer
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("/mutt" . mail-mode))
#+END_SRC

   And of course I want auto-fill when writing email, and I want to
   bind C-c C-c to server-edit, which finishes the editing session
#+BEGIN_SRC emacs-lisp
  (defun zmalltalker-mail-mode-hook ()
    (auto-fill-mode 1)
    (local-set-key (kbd "C-c C-c")  (lambda ()
           (interactive)
           (save-buffer)
           (server-edit))))




  (add-hook 'mail-mode-hook 'zmalltalker-mail-mode-hook)
#+END_SRC
** Multiple cursors
   This makes me look as cool as Magnar.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat dotfiles-dir "/contrib/multiple-cursors"))
  (require 'multiple-cursors)
  ;; Select next/previous/all places like the current
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

  (global-set-key (kbd "C-S-c C-e") 'mc/edit-ends-of-lines)
  (global-set-key (kbd "C-S-c C-a") 'mc/edit-beginnings-of-lines)
#+END_SRC
** Goto line with feedback
   M-g M-g is kind of boring; it could be helpful to turn on line
   numbers while the prompt is being displayed. Here we go.

#+BEGIN_SRC emacs-lisp
  ;; turn line numbers off by default
  (global-linum-mode -1)

  (defun goto-line-with-feedback (&optional line)
    "Show line numbers temporarily, while prompting for the line number input"
    (interactive "P")
    (if line
        (goto-line line)
      (unwind-protect
          (progn
            (linum-mode 1)
            (goto-line (read-number "Goto line: ")))
        (linum-mode -1))))
  (global-set-key (vector 'remap 'goto-line) 'goto-line-with-feedback)

#+END_SRC
** Mu4e
   Trying out [[http://www.djcbsoftware.nl/code/mu/mu4e/index.html][mu4e]] for my email. Mu is a search engine for Maildir
   email, and relies on my existing toolchain for email:
   - Offlineimap for imap
   - msmtp to send mail.

/// no longer used #+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat dotfiles-dir "contrib/mu4e"))
  (require 'mu4e)
  (setq mu4e-get-mail-command "offlineimap")
  (setq mu4e-drafts-folder "/Gitorious/drafts")
  (setq user-mail-address "marius@gitorious.com")
  (setq mu4e-user-mail-address-list (list "marius@shortcut.no" "marius@gitorious.org" "zmalltalker@zmalltalker.com" "marius.mathiesen@gmail.com" "marius@gitorious.com"))
  ;;  (setq user-mail-address-list "marius@gitorious.com")
  (setq message-kill-buffer-on-exit t)
  ;; Use fancy chars
  (setq mu4e-use-fancy-chars t)
  ;; Shortcuts
  (setq mu4e-maildir-shortcuts
        '(("/Gitorious/inbox" . ?g)
          ("/Gmail/inbox" . ?z)
          ("/Shortcut/inbox" . ?s)
          ("/Gmail/gitorious-ml" . ?m)
          ))

  ;; Smart refile locations
  (setq mu4e-refile-folder
        (lambda (msg)
          (cond
           ;; messages sent directly to me go to /archive
           ;; also `mu4e-user-mail-address-regexp' can be used
           ((mu4e-message-contact-field-matches msg :to "marius@gitorious")
            "/Gitorious/archive")
           ((mu4e-message-contact-field-matches msg :to "marius.mathiesen@gmail.com")
            "/Gmail/archive")
           ((mu4e-message-contact-field-matches msg :to "zmalltalker@zmalltalker.com")
            "/Gmail/archive")
           ((mu4e-message-contact-field-matches msg :to "marius@shortcut.no")
            "/Shortcut/archive")
           ;; everything else goes to /archive
           ;; important to have a catch-all at the end!
           (t  "/Gmail/archive"))))

  ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
  (setq mu4e-sent-messages-behavior 'delete)


  ;; Try to display images in mu4e
  (setq
   mu4e-view-show-images t
   mu4e-view-image-max-width 800)

  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  ;; sending mail
  (setq message-send-mail-function 'message-send-mail-with-sendmail
        sendmail-program "/usr/bin/msmtp"
        user-full-name "Marius Mårnes Mathiesen")


  (setq mu4e-confirm-quit nil
        mu4e-headers-date-format "%d/%b/%Y %H:%M" ; date format
        mu4e-html2text-command "html2text -utf8 -width 72"
        )

  ;; Borrowed from http://ionrock.org/emacs-email-and-mu.html
  ;; Choose account label to feed msmtp -a option based on From header
  ;; in Message buffer; This function must be added to
  ;; message-send-mail-hook for on-the-fly change of From address before
  ;; sending message since message-send-mail-hook is processed right
  ;; before sending message.
  (defun choose-msmtp-account ()
    (if (message-mail-p)
        (save-excursion
          (let*
              ((from (save-restriction
                       (message-narrow-to-headers)
                       (message-fetch-field "from")))
               (account
                (cond
                 ((string-match "marius.mathiesen@gmail.com" from) "gmail")
                 ((string-match "zmalltalker@zmalltalker.com" from) "gmail")
                 ((string-match "marius@shortcut.no" from) "shortcut")
                 ((string-match "marius@gitorious.com" from) "gitorious")
                 ((string-match "marius@gitorious.org" from) "gitorious"))))
            (setq message-sendmail-extra-arguments (list '"-a" account))))))
  (setq message-sendmail-envelope-from 'header)
  (add-hook 'message-send-mail-hook 'choose-msmtp-account)
// #+END_SRC
*** Dynamic sender addresses
    When replying to an email I want to use the address I received
    this message to as the sender of the reply. This is fairly trivial:

// disalbed #+BEGIN_SRC emacs-lisp
  (add-hook 'mu4e-compose-pre-hook
            (defun my-set-from-address ()
              "Set the From address based on the To address of the original."
              (let ((msg mu4e-compose-parent-message)) ;; msg is shorter...
                (if msg
                    (setq user-mail-address
                          (cond
                           ((mu4e-message-contact-field-matches msg :to "gitorious@google")
                            "marius.mathiesen@gmail.com")
                           ((mu4e-message-contact-field-matches msg :to "@gitorious")
                            "marius@gitorious.com")
                           ((mu4e-message-contact-field-matches msg :to "marius@shortcut.no")
                            "marius@shortcut.no")
                           ((mu4e-message-contact-field-matches msg :to "marius.mathiesen@gmail.com")
                            "zmalltalker@zmalltalker.com")
                           ((mu4e-message-contact-field-matches msg :to "zmalltalker@zmalltalker.com")
                            "zmalltalker@zmalltalker.com")
                           (t "marius@gitorious.com")))))))
// #+END_SRC
*** Bookmarks

// not currently used #+BEGIN_SRC emacs-lisp
  (add-to-list 'mu4e-bookmarks
                '("maildir:/Gitorious/inbox OR maildir:/Shortcut/inbox OR maildir:/Gmail/inbox flag:unread" "Today's news" ?z))
  (add-to-list 'mu4e-bookmarks
               '("maildir:/Gmail/gitorious-ml flag:unread" "Unread on the mailing list" ?m))

  (add-to-list 'mu4e-bookmarks
               '("flag:flagged" "Flagged messages" ?f))


// #+END_SRC
*** Attaching files from dired
    Wouldn't it be awesome to be able to send files from dired using
    your mail client?

    I'll need a special version of the
    gnus-dired-mail-buffers function so it understands mu4e buffers as
    well:

#+BEGIN_SRC emacs-lisp
  (require 'gnus-dired)
  ;; make the `gnus-dired-mail-buffers' function also work on
  ;; message-mode derived modes, such as mu4e-compose-mode
  (defun gnus-dired-mail-buffers ()
    "Return a list of active message buffers."
    (let (buffers)
      (save-current-buffer
        (dolist (buffer (buffer-list t))
          (set-buffer buffer)
          (when (and (derived-mode-p 'message-mode)
                     (null message-sent-message-via))
            (push (buffer-name buffer) buffers))))
      (nreverse buffers)))

;; updated after removal of mu4e  (setq gnus-dired-mail-mode 'mu4e-user-agent)
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+END_SRC

    With this, I can attach a file as an attachment to a new email
    message by entering =C-c RET C-a=, and I'm good to go.
*** Automatically get new mail
    Although =U= from the mu4e menu is simple, it's even better
    (maybe) to have mu4e fetch mail (and update the mu index)
    automatically. Simply set =mu4e-update-interval= to the number of
    seconds between each check. Let's go with every 10 minutes.

// no longer used #+BEGIN_SRC emacs-lisp
(setq mu4e-update-interval 600)
//#+END_SRC

*** Attachments
    Since any decent operating system mounts /tmp as tmpfs and
    sometimes it's unpractical to lose downloaded attachments, I want
    to use ~/Downloads to store attachments from email.

// mu4e removed #+BEGIN_SRC emacs-lisp
(setq mu4e-attachment-dir "~/Downloads")
// #+END_SRC
*** One click mail checking
    My buddy [[http://cjohansen.no/][Christian]] has an awesome setup where =C-x M= a window
    configuration is set up with mu4e (no other windows), which is
    killed when pressing =q=.

// mu4e removed #+BEGIN_SRC emacs-lisp
  (defun mu4e-up-to-date-status ()
    (interactive)
    (window-configuration-to-register :mu4e-fullscreen)
    (mu4e)
    (delete-other-windows))
  (defun mu4e-quit-session ()
    "Restores the previous window configuration and kills the mu4e buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :mu4e-fullscreen))

  (define-key mu4e-main-mode-map (kbd "q") 'mu4e-quit-session)
  (global-set-key (kbd "C-x M") 'mu4e-up-to-date-status)
//#+END_SRC

*** Org integration
    In order to use org "minor" mode when composing (awesome!) and store links to messages:
    - to a message from message view
    - to a query in headers view
// #+BEGIN_SRC emacs-lisp
(require 'org-mu4e)
// #+END_SRC

    To edit messages in org-mode, enter =C-c o= to enable org-mode inside the message.
// #+BEGIN_SRC emacs-lisp
(define-key mu4e-compose-mode-map (kbd "C-c o") 'org-mu4e-compose-org-mode)
// #+END_SRC

*** Encryption in email
    Enable =epa-mail-mode= when composing messages:

// #+BEGIN_SRC
(add-hook 'mu4e-compose-mode-hook
   (defun my-setup-epa-hook ()
     (epa-mail-mode)))
// #+END_SRC

    Now, when composing a message, use:
    * =C-c C-e s= to sign a message.
    * =C-c C-e e= to encrypt a message

    Let's enable it in =mu4e-view-mode= as well:

// #+BEGIN_SRC emacs-lisp
(add-hook 'mu4e-view-mode-hook
  (defun my-view-mode-hook ()
   (epa-mail-mode)))
// #+END_SRC

    Now, when viewing a message, enter:
    * =C-c C-e v= to verify a signature
    * =C-c C-e d= to decrypt a message

** Switch between org buffers
   Org-mode has this really nice facility for switching between org
   buffers; being all buffers in =org-agenda-files= (and other open
   org files, of course). I'm binding this baby to =C-c b=

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c b") 'org-switchb)
#+END_SRC
** Unfill paragraphs for export to Wordpress etc
   I use org-mode for authoring (naturally). However, tools like the WYSIWYG
   editor on wordpress creates paragraphs for newlines (YUCK!). Support creating
   really long lines.
#+BEGIN_SRC emacs-lisp
  (defun zmalltalker/wordpress-uglify (start end)
    (interactive "r")
    (let ((fc fill-column))
      (setq fill-column 999999999)
      (fill-region-as-paragraph start end)
      (setq fill-column fc)
      (copy-region-as-kill start end)
))
#+END_SRC

   Since I use =C-_= for undo, I'll rebind this function to =C-x u=.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x u") 'zmalltalker/wordpress-uglify)
#+END_SRC
** Publishing snippets
   Blatantly stolen from https://github.com/magnars/.emacs.d/blob/master/users/fimasvee/my-defuns.el
#+BEGIN_SRC emacs-lisp
  (defun buffer-file-name-body ()
    "Buffer file name stripped of directory and extension"
    (if (buffer-file-name)
        (file-name-nondirectory (file-name-sans-extension (buffer-file-name)))
      (cadr (reverse (split-string (dired-current-directory) "/")))))

  (defun wte--unique-filename (stub &optional index)
    (setq index (or index 1))
    (let ((filename (concat "~/Projects/snippets/"
                            stub
                            ".el"
                            (if (< index 10) "-0" "-")
                            (number-to-string index)
                            ".html")))
      (if (file-exists-p filename)
          (wte--unique-filename stub (1+ index))
        filename)))

  (defun zmalltalker-publish-snippet (beg end)
    "Create a blog post containing the syntax highlighted code in selection"
    (interactive "r")
    (let* ((htmlized-reg (htmlize-region-for-paste beg end))
           (filename (wte--unique-filename (buffer-file-name-body)))
           (header (format "<!DOCTYPE html>
  <html lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\">
  <head>
  <link type=\"text/css\" media=\"screen\" href=\"stylesheets/app.css\" rel=\"stylesheet\" />
  <title>Zmalltalker's snippets: %s</title>
  </head>
  <body>" (file-name-nondirectory (buffer-file-name))))
           (footer "</body>
  </html>")
           )
      (find-file filename)
      (html-mode)
      (save-excursion
        (insert header)
        (insert htmlized-reg)
        (insert footer)
        )
  ))


#+END_SRC
** Clojure REPL
   Looks like [[https://github.com/kingtim/nrepl.el][nrepl.el]] is the way to go. First of all, set up the
   melpa repo:

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
#+END_SRC

   nrepl.el lets you start a repl server from within Emacs, which is
   awesome. To try it out, simply use Leiningen to create a new project

#+BEGIN_EXAMPLE
lein new demo
cd omg
e src/omg/core.clj
#+END_EXAMPLE

   Now with that running, start the repl from Emacs with =M-x
   nrepl-jack-in= and wait for the repl to appear. Once inside, try:

#+BEGIN_SRC clojure
(require '[omg.core :as omg])
(omg/foo "Sure")
#+END_SRC

   And once this is running, use the familiar =C-x C-e= to evaluate
   Clojure code so it's visible within the REPL. And =M-TAB= completes
   symbols. It's all really wonderful. Oh, and =C-up= and =C-down=
   walks the history.

   To quit, run =M-x repl-quit=.

** scpaste
   What a wonderful little thing.

#+BEGIN_SRC emacs-lisp
  (require 'scpaste)
  (setq scpaste-http-destination "http://friskbris.no/snippets")
  (setq scpaste-scp-destination "zmalltalker.com:/var/www/friskbris.no/snippets")
  (setq scpaste-footer (concat "<p>Generated by Marius Mathiesen at %s."
                               (cadr (current-time-zone))
                               ". <a href='%s'original>View/download original</a></p>"))
  (defun themed-scpaste (original-name)
    (interactive "MName (defaults to buffer name): ")
    "Swap to a lighter team, run scpaste, and revert to the old theme"
    (load-theme 'adwaita t)
    (scpaste original-name)
    (load-theme 'solarized-dark t)
  )

#+END_SRC
** Disable n00b-modes
   Menu-bar be gone.
#+BEGIN_SRC emacs-lisp
(menu-bar-mode 0)
#+END_SRC

   Toolbars be gone.
#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
#+END_SRC

   Can haz column numbers?
#+BEGIN_SRC emacs-lisp
(column-number-mode t)
#+END_SRC

** Indent buffer or region
   Indent-region is really nice, but even better is a command that
   will indent the region (if inside a region) or the entire buffer.

   Blatantly stolen from [[http://emacsredux.com/blog/2013/03/27/indent-region-or-buffer/][here]]. Binding this baby to "shift-left tab".

#+BEGIN_SRC emacs-lisp
  (defun indent-buffer ()
    "Indent the currently visited buffer."
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun indent-region-or-buffer ()
    "Indent a region if selected, otherwise the whole buffer."
    (interactive)
    (save-excursion
      (if (region-active-p)
          (progn
            (indent-region (region-beginning) (region-end))
            (message "Indented selected region."))
        (progn
          (indent-buffer)
          (message "Indented buffer.")))))
  (global-set-key (kbd "<backtab>") 'indent-region-or-buffer)
#+END_SRC
** TODO Perspectives
   Set up perspectives
 custom-persp-kbd is not working because I don't have a <XF86HomePage> key
 plus I'm not sure i even want this feature
#+BEGIN_SRC emacs-lisp
(persp-mode)
#+END_SRC

   Inspired by (=stolen from) [[http://emacsrookie.com/2011/09/25/workspaces/][this post]] I'm extending perspectives
   with support for names and a body.

#+BEGIN_SRC emacs-lisp
(defmacro custom-persp (name &rest body)
       `(let ((initialize (not (gethash ,name perspectives-hash)))
              (current-perspective persp-curr))
          (persp-switch ,name)
          (when initialize ,@body)
          (setq persp-last current-perspective)))
#+END_SRC

   Set up a magic prefix key: the funny House key on my keyboard:

#+BEGIN_SRC emacs-lisp
(defun custom-persp-kbd (key)
(kbd (concat "<XF86HomePage>" key))
)
#+END_SRC

*** Org files
    Switch to the =@org= perspective, open =today.org= if first time.

#+BEGIN_SRC emacs-lisp
(defun custom-persp/org ()
  (interactive)
  (custom-persp "@org"
  (find-file "/home/marius/Dropbox/dotfiles/orgfiles/today.org")))

(global-set-key (custom-persp-kbd "o") 'custom-persp/org)
#+END_SRC

*** Mail
    Switch to mail, by default start mu4e.
    Bound to =C-c p m= (Perspective Mail)

// #+BEGIN_SRC emacs-lisp
    (defun custom-persp/mail ()
      (interactive)
      (custom-persp "@email"
                    (mu4e)))

  (global-set-key (kbd "C-c p m") 'custom-persp/mail)
// #+END_SRC

*** Gitorious
    Switch to Gitorious, by default open =app/models/user.rb=.

#+BEGIN_SRC emacs-lisp
  (defun custom-persp/gitorious ()
    (interactive)
    (let ((gitorious-home "/home/marius/Projects/gitorious/gitorious/"))
      (custom-persp "@gitorious"
                    (find-file (concat gitorious-home "app/models/user.rb"))
                    (setq tags-file-name (concat gitorious-home "TAGS"))
                    )))

  (global-set-key (custom-persp-kbd "g") 'custom-persp/gitorious)
#+END_SRC

**** Some extra sweetness
     I run a tmux session with a zeus instance inside. Based on the
     following assumptions:
     - there's a tmux session named =gitorious=
     - this session has a window named =gts-tests=
     - zeus is running "somewhere"

     I can execute the current test file from Emacs in the
     =gts-tests= window in the =gitorious= tmux session using =C-c
     C-t=. Is that cool or what?

#+BEGIN_SRC emacs-lisp
  (defun gitorious/run-current-test-file ()
    "Run tests via zeus in Tmux"
    (interactive)
    (shell-command (format "tmux send-keys -t gitorious:gts-tests.0 'zeus test %s' Enter" (buffer-file-name))))

  (define-key ruby-mode-map (kbd "C-c C-t") 'gitorious/run-current-test-file)
#+END_SRC
*** Javascript
    A javascript perspective, to my current javascript project.

    It opens a javascript file, sets the current directory and starts
    a [[https://github.com/guard/guard][Guard]] subshell.

#+BEGIN_SRC emacs-lisp
  ;; Don't open the file if it's already open
  (defun guard-start ()
    "Run guard in Emacs"
    (interactive)
    (async-shell-command "bundle exec guard" "*Guard*"))

  (defun custom-persp/javascript ()
    (interactive)
    (custom-persp "@javascript"
                  (let ((current-js-project "/home/marius/Projects/nordea-finans-sverige/webkalkyl"))
                    (setenv "JSTESTDRIVER_HOME" "/opt/lib")
                    (find-file (concat current-js-project "/src/bind.js"))
                    (cd current-js-project)
;;                    (guard-start)
                    )))
  (global-set-key (custom-persp-kbd "j") 'custom-persp/javascript)
#+END_SRC
*** Lisp
    All this scratching my private parts calls for a procrastination
    perspective. =House button l= to the resque.

#+BEGIN_SRC emacs-lisp
  (defun custom-persp/procrastination ()
    "Speak with a lisp"
    (interactive)
    (custom-persp "@lisp"
                  (find-file (concat dotfiles-dir "/marius.org"))))

  (global-set-key (custom-persp-kbd "l") 'custom-persp/procrastination)
#+END_SRC
*** Puppet recipes
#+BEGIN_SRC emacs-lisp
  (defun custom-persp/puppet ()
    "Puppet perspective"
    (interactive)
    (let ((puppet-home "/home/marius/Projects/puppet"))
      (custom-persp "@puppet"
                    (find-file (concat puppet-home "/manifests/nodes.pp")))))
(global-set-key (custom-persp-kbd "p") 'custom-persp/puppet)
#+END_SRC
** Unicode
   Require my very own =unicode-mode=

#+BEGIN_SRC emacs-lisp
(require 'unicode-mode)
#+END_SRC
** Touch me now
   Christian showed me a really neat trick implementing the
   equivalent of =touch= in Emacs. Handy.

   Binding this to =C-x t=.

#+BEGIN_SRC emacs-lisp
  (defun zmalltalker/touch ()
    "touch(1) in Emacs"
    (interactive)
    (save-excursion
      (insert " ")
      (backward-delete-char 1)
      (save-buffer)))
  (global-set-key (kbd "C-x t") 'zmalltalker/touch)

#+END_SRC
** Editing awesomeness
   =C-return= opens a new line below point.
   =S-S-return= opens a new line above point.
   =M-return= opens a new line with cursor at point on a new line

#+BEGIN_SRC emacs-lisp
  (defun open-line-below ()
    (interactive)
    (end-of-line)
    (newline)
    (indent-for-tab-command))

  (defun open-line-above ()
    (interactive)
    (beginning-of-line)
    (newline)
    (forward-line -1)
    (indent-for-tab-command))

  (defun new-line-in-between ()
    (interactive)
    (newline)
    (indent-for-tab-command))

  (global-set-key (kbd "<C-return>") 'open-line-below)
  (global-set-key (kbd "<C-S-return>") 'open-line-above)
  (global-set-key (kbd "<M-return>") 'new-line-in-between)
#+END_SRC

** Restclient.el
   [[https://github.com/pashky/restclient.el][Yummy!]] Restclient is a major mode for interacting with REST
   interfaces. Enter something like:

#+BEGIN_EXAMPLE
GET https://gitorious.org/gitorious/mainline.xml
#+END_EXAMPLE

   then hit =C-c C-c= and view the (pretty-printed) results in
   a separate buffer. =C-c C-r= does the same without
   pretty-printing.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (concat dotfiles-dir "/contrib/restclient"))
(require 'restclient)
#+END_SRC
** Yes or no?
   Also known as y or n. I prefer the latter

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Projectile
   I'm totally sold on this one

#+BEGIN_SRC emacs-lisp
(projectile-global-mode)
#+END_SRC
* My Emacs installation
  My OS (Fedora 17) ships with Emacs 24 (doesn't yours?). Sadly this
  version doesn't work 100% with all of the orgmode features, either
  because it's a prerelease version or because it's poorly built.

  Whenever I try to run org-export, I get an error along the lines of
  "cannot find library org"; trying to resolve this by altering
  org-mode just seems to make matters worse.

  Because of this I have built and installed emacs 24.1 from source,
  and then used the alternatives system to swap the default Emacs
  installation with my own.

  I used [[http://jonebird.com/2011/12/29/installing-emacs-v24-on-fedora/][this recipe]] to install the required packages for building
  emacs, installed my custom emacs into a non-standard location
  (/usr/local/emacs24) and used alternatives to swap emacs
  implementation.


** Keeping files in sync is tricky

   By default, Emacs will not update the contents of open buffers when
   a file changes on disk. This is inconvenient when switching
   branches in Git - as you'd risk editing stale buffers.

   This problem can be solved

#+begin_src emacs-lisp
(global-auto-revert-mode)
#+end_src


** Misc stuff
*** Ruby mappings

    I'm lazy, didn't find a place to put this yet.
   - Use ruby-mode for Rakefiles
   - Use ruby-mode for Gemfiles
   - Bind C-x / to comment-or-uncomment-region

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.rake$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Guardfile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.gemspec$" . ruby-mode))
#+end_src

    My buddy Christian just showed me how to transform this:

#+BEGIN_SRC ruby
my_method(foo,
          bar,
          baz,
          gee(1,
              00,
              zee(1,
                  1231)
              ))
#+END_SRC

    into this:

#+BEGIN_SRC ruby
my_method(foo,
  bar,
  baz,
  gee(1,
    00,
    zee(1,
      1231)
    ))
#+END_SRC

    - How can I achieve this awesomeness? you ask. Let me show you:

#+BEGIN_SRC emacs-lisp
(setq ruby-deep-indent-paren nil)
#+END_SRC
*** Web-mode
    Countless times, I've been bitten my hacks like MMM (Multiple
    Major Modes). But from what I hear, =web-mode= actually
    works. Let's give it a shot

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.erb$" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html$" . web-mode))

#+END_SRC

*** Encryption in org-mode
    Stolen from http://orgmode.org/worg/org-tutorials/encrypting-files.html
    First of all, let's require it
#+BEGIN_SRC emacs-lisp
(require 'org-crypt)
#+END_SRC

    Next, set up which GPG key to use for encryption.

#+BEGIN_SRC emacs-lisp
(setq org-crypt-key "marius@gitorious.com")
#+END_SRC

    To encrypt an entry, simply use =org-encrypt-entry=, like has been
    done in the next paragraph.
**** This is invisible
****
     You can't touch this.

*** Chruby
    Swith my Rubies in Emacs with chruby.el.
#+BEGIN_SRC emacs-lisp
(require 'chruby)
(chruby "1.9.3")
#+END_SRC

*** Smart-parens
    Take care of those parens etc with style. When entering anything
    that acts like a paren, add a closing one. Manually typing a
    closing paren skips that character:

#+BEGIN_EXAMPLE
(|)
(foo)|
#+END_EXAMPLE

    And it handles quoted pairs as well, deleting the matching ones:

#+BEGIN_EXAMPLE
  "\"({foo})\""
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (add-hook 'ruby-mode-hook 'smartparens-mode)
#+END_SRC
*** XMPfilter
    Now that I have a working Ruby inside Emacs (through =chruby-el=)
    I can finally use xmpfilter.

    Use a hashrocket comment and hit =C-c C-c= to evaluate:

#+BEGIN_SRC ruby
  foo = {name: "John"}
  foo # => {:name=>"John"}
#+END_SRC
+BEGIN_SRC emacs-lisp
(require 'rcodetools)
(define-key ruby-mode-map (kbd "C-c C-c") 'xmp)
#+END_SRC
** Other (contributed) libraries
*** Expand region
    Lets you do wonderful things with regions.
#+begin_src emacs-lisp
(add-to-list 'load-path (concat dotfiles-dir "contrib/expand-region"))
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+end_src

*** rvm
    Use a usable ruby
#+begin_src emacs-lisp
(add-to-list 'load-path (concat dotfiles-dir "contrib/rvm.el"))
(require 'rvm)
#+end_src

*** Puppet-mode
    We need puppet-mode for puppet manifests
#+begin_src emacs-lisp
(require 'puppet-mode)
(add-to-list 'auto-mode-alist '("\\.pp$" . puppet-mode))
#+end_src
*** Browser
    I can't believe I have to run through these hoops just to launch a
    browser. Oh well
#+BEGIN_SRC emacs-lisp
(defun browse-url-default-macosx-browser (url &optional new-window)
  (interactive (browse-url-interactive-arg "URL: "))
  (if (and new-window (>= emacs-major-version 23))
      (ns-do-applescript
       (format (concat "tell application \"Safari\" to make document with properties {URL:\"%s\"}\n"
		       "tell application \"Safari\" to activate") url))
    (start-process (concat "open " url) nil "open" url)))

#+END_SRC

    So I can visit http://zmalltalker.com/
** Gitorious stuff
   I'm working on an Emacs thing for merge requests.
#+begin_src emacs-lisp
(require 'merge-requests)
#+end_src
** Beer
   Of course I want my beer stuff in Emacs.
*** Calculate alcolhol by volume
    ABV = (og – fg) * 131.25
#+BEGIN_SRC emacs-lisp
  (defun beer/calculate-abv
    (original-gravity finishing-gravity)
    "Calculate alcohol by volume given OG and FG"
    (* (- original-gravity finishing-gravity) 131.25)
  )

  (defun beer/calculate-alcohol
    (og fg)
    (interactive "nOriginal gravity: \nnFinishing gravity: ")
    (message (concat "Alcohol: " (number-to-string (beer/calculate-abv og fg))
  )))

(beer/calculate-alcohol 1.02 1.0)
#+END_SRC
*** Conversions

#+BEGIN_SRC emacs-lisp
  (defun beer/gallon-to-litre (gallons)
    (interactive "nHow many gallons? ")
    (message (format "%f gallons is %.2f litres" gallons (* gallons 3.78))))

  (defun beer/litre-to-gallons (litres)
    (interactive "nHow many litres? ")
    (message (format "%f litres is %.2f gallons" litres (/ litres 3.78))))

#+END_SRC
** Gradle
   Let's use groovy-mode for Gradle build files.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.gradle$" . groovy-mode))
#+END_SRC
